{"version":3,"sources":["icons/svg/cloud-upload.svg","icons/svg/github.svg","components/Api/config.js","components/Api/index.jsx","icons/UploadFile.jsx","components/DropzoneArea/ToyZone.jsx","components/DropzoneArea/index.jsx","components/Tabs/TabPanel.jsx","components/Tabs/AllTabProps.jsx","components/SandBox/index.jsx","components/Selects/ContentTypeSelect.jsx","components/Selects/StatusCodeSelect.jsx","components/HeaderPanel/index.jsx","components/Tabs/HttpMethodMock.jsx","helpers/Validations.js","components/CustomSnackbarContent/index.jsx","components/Tabs/MockTab.jsx","components/Tabs/index.jsx","icons/GitHubIcon.jsx","pages/Home/styles.jsx","pages/Home/index.jsx"],"names":["module","exports","config","Url","CreateFile","file","formData","FormData","append","name","fetch","method","body","mockStateToMockRequest","mockState","httpMethod","request","HttpMethod","StatusCode","ContentType","Body","Charset","Headers","forEach","header","key","keyH","value","Array","isArray","valueH","push","Key","Value","UploadFile","props","fontSize","color","style","src","cloudUpload","height","ToyZone","state","hover","onDragOver","bind","onDragLeave","onDrop","openFileDialog","onFilesAdded","fileInputRef","React","createRef","event","files","target","this","fileListToArray","stopEvent","setState","dataTransfer","preventDefault","stopPropagation","list","result","i","length","item","current","click","loading","onClick","className","ref","type","multiple","onChange","Loading","Component","defaultProps","DropzoneDialogExample","useState","openDialog","setOpenDialog","downloadLink","setDownloadLink","isLoading","setLoading","Transition","forwardRef","Slide","direction","handleCloseDialog","sendRequest","then","response","json","guid","Dialog","open","TransitionComponent","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","href","DialogActions","Button","TabPanel","children","index","other","Typography","component","role","hidden","Box","p","AllTabProps","SandBox","disable","handleChangeSandBox","content","useEffect","document","querySelectorAll","element","width","parentElement","position","padding","background","remove","classes","displayMode","selectedTab","onDisplayModeButtonClick","onCodeChange","permissions","scriptEditor","defaultValue","mode","readOnly","wrapLines","templateEditor","theme","executeOnCodeChange","executeOnCodeChangeDebounce","useStyles","makeStyles","formControl","margin","spacing","minWidth","paddingBottom","selectEmpty","marginTop","ContentTypeSelect","handleChangeContentType","FormControl","disabled","InputLabel","htmlFor","Select","inputProps","MenuItem","textField","StatusCodeSelect","handleChangeStatusCode","customState","setCustomState","handleChange","TextField","clsx","label","InputProps","endAdornment","InputAdornment","IconButton","edge","aria-label","onMouseDown","root","paddingLeft","maxHeight","heading","typography","pxToRem","fontWeight","fontWeightRegular","gridHeaderAdded","paddingTop","textHeaderAdded","HeaderPanel","handleChangeHeaders","headers","setheader","handleHeaderOnChange","handleRemoveHeader","filter","indexHeader","ExpansionPanel","TransitionProps","unmountOnExit","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","Grid","container","xs","toString","replace","map","HttpMethodMock","handleChangeSelect","handleChangeSwitch","mock","needCheck","checked","Active","gridContainer","FormControlLabel","control","Switch","md","gridSandbox","moduleBorderWrap","validateJson","str","test","validateXML","text","implementation","createDocument","xmlDoc","DOMParser","parseFromString","err","getElementsByTagName","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","backgroundColor","green","palette","dark","primary","main","amber","icon","iconVariant","opacity","marginRight","message","display","alignItems","CustomSnackbarContent","variant","Icon","SnackbarContent","action","textAlign","maxWidth","visibility","buttonCreate","MockTab","mockDefault","mockGet","setMockGet","mockPost","setMockPost","mockPut","setMockPut","mockPatch","setMockPatch","mockDelete","setMockDelete","tabindex","setTabindex","openAlert","setOpenAlert","alertMessage","setAlertMessage","useTheme","handleClick","Mocks","JSON","stringify","CreateMock","useImperativeHandle","save","handleCloseAlert","reason","changeMock","editorName","Tabs","newValue","indicatorColor","textColor","centered","Tab","axis","onChangeIndex","dir","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","flexGrow","setValue","Paper","GitHubIcon","github","createStyles","link","textDecoration","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","justifyContent","mixins","Home","setOpen","childRef","useRef","CssBaseline","AppBar","Toolbar","noWrap","Drawer","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","window","location","exact","path"],"mappings":"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","file":"static/js/4.98983976.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud-upload.8f93b02b.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.617870e4.svg\";","export const config = {\r\n    Url: \"https://mockercloud.herokuapp.com/\"\r\n}","import { config } from './config'\r\nexport const CreateMock = (mockGet, mockPost, mockPut, mockPatch, mockDelete) => {\r\n    let mock = { Mocks: [] }\r\n\r\n    if (mockGet.Active) {\r\n        mock.Mocks.push(mockStateToMockRequest(mockGet, \"GET\"))\r\n    }\r\n    if (mockPost.Active) {\r\n        mock.Mocks.push(mockStateToMockRequest(mockPost, \"POST\"))\r\n    }\r\n    if (mockPut.Active) {\r\n        mock.Mocks.push(mockStateToMockRequest(mockPut, \"PUT\"))\r\n    }\r\n    if (mockPatch.Active) {\r\n        mock.Mocks.push(mockStateToMockRequest(mockPatch, \"PATCH\"))\r\n    }\r\n    if (mockDelete.Active) {\r\n        mock.Mocks.push(mockStateToMockRequest(mockDelete, \"DELETE\"))\r\n    }\r\n\r\n    return fetch(config.Url + \"api/create\", {\r\n        method: 'POST',\r\n        body: JSON.stringify(mock),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n    })\r\n}\r\n\r\nexport const CreateFile = file => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file, file.name);\r\n\r\n    return fetch(config.Url + \"api/files\", {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n}\r\n\r\nconst mockStateToMockRequest = (mockState, httpMethod) => {\r\n    let request = {\r\n        HttpMethod: httpMethod,\r\n        StatusCode: mockState.StatusCode,\r\n        ContentType: mockState.ContentType,\r\n        Body: mockState.Body,\r\n        Charset: mockState.Charset,\r\n        Headers: []\r\n    }\r\n\r\n    mockState.Headers.forEach(header => {\r\n        let key = header.keyH[0]\r\n        let value = Array.isArray(header.valueH) ? header.valueH[0] : \"\"\r\n        request.Headers.push({\r\n            Key: key,\r\n            Value: value\r\n        })\r\n    });\r\n    return request;\r\n}","import React from 'react'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport cloudUpload from './svg/cloud-upload.svg'\r\n\r\nconst UploadFile = props => {\r\n\r\n    return (\r\n        <Icon fontSize=\"large\" color=\"primary\" style={{ fontSize: \"10rem\" }}>\r\n            <img src={cloudUpload} height=\"100vh\" />\r\n        </Icon>\r\n    )\r\n}\r\nexport default UploadFile","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loading from \"../Loading\";\r\nimport UploadFile from '../../icons/UploadFile'\r\nimport \"./index.css\";\r\n\r\n/**\r\n * Upload component. Can be used for uploading files by clicking or dragging files onto it.\r\n *\r\n * **Props**\r\n *\r\n * `onFilesAdded(files)` Triggered after files are uploaded.\r\n */\r\nclass ToyZone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hover: false\r\n    };\r\n\r\n    this.onDragOver = this.onDragOver.bind(this);\r\n    this.onDragLeave = this.onDragLeave.bind(this);\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.openFileDialog = this.openFileDialog.bind(this);\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.fileInputRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   * Handle adding files through file dialog\r\n   * @param {Object} event\r\n   */\r\n  onFilesAdded(event) {\r\n    const { files } = event.target;\r\n    this.props.onFilesAdded(this.fileListToArray(files));\r\n  }\r\n\r\n  /**\r\n   * Handle file being dragged over drag area\r\n   * @param {Object} event\r\n   */\r\n  onDragOver(event) {\r\n    this.stopEvent(event);\r\n    this.setState({ hover: true });\r\n  }\r\n\r\n  /**\r\n   * Handle file being dragged out of drag area\r\n   * @param {Object} event\r\n   */\r\n  onDragLeave(event) {\r\n    this.stopEvent(event);\r\n    this.setState({ hover: false });\r\n  }\r\n\r\n  /**\r\n   * Handle file dropped into drag area\r\n   * @param {Object} event\r\n   */\r\n  onDrop(event) {\r\n    this.stopEvent(event);\r\n\r\n    const { files } = event.dataTransfer;\r\n    this.props.onFilesAdded(this.fileListToArray(files));\r\n\r\n    this.setState({ hover: false });\r\n  }\r\n\r\n  /**\r\n   * Prevent default event\r\n   */\r\n  stopEvent(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Converts FileList into Array\r\n   */\r\n  fileListToArray(list) {\r\n    const result = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n      result.push(list.item(i));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Opens file system dialog\r\n   */\r\n  openFileDialog() {\r\n    this.fileInputRef.current.click();\r\n  }\r\n\r\n  render() {\r\n    const { hover } = this.state;\r\n    const { loading } = this.props;\r\n\r\n    return (\r\n      <div\r\n        onDragLeave={this.onDragLeave}\r\n        onDragOver={this.onDragOver}\r\n        onDrop={this.onDrop}\r\n        onClick={this.openFileDialog}\r\n        className={hover ? \"drop-zone-container hover\" : \"drop-zone-container\"}\r\n      >\r\n        <input\r\n          ref={this.fileInputRef}\r\n          type=\"file\"\r\n          multiple\r\n          onChange={this.onFilesAdded}\r\n        />\r\n        <div className=\"drag-files\">\r\n          {loading ? <Loading /> : <div className=\"drop-zone-content\"><UploadFile /> <p>Drag file to upload</p></div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nToyZone.propTypes = {\r\n  onFilesAdded: PropTypes.func,\r\n  loading: PropTypes.bool\r\n};\r\n\r\nToyZone.defaultProps = {\r\n  onFilesAdded: () => null,\r\n  loading: false\r\n};\r\n\r\nexport default ToyZone;","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { CreateFile } from '../Api'\r\nimport Loading from '../Loading'\r\nimport { config } from '../Api/config'\r\nimport ToyZone from \"./ToyZone\";\r\nexport default function DropzoneDialogExample() {\r\n    const [openDialog, setOpenDialog] = React.useState();\r\n    const [downloadLink, setDownloadLink] = React.useState('');\r\n    const [isLoading, setLoading] = React.useState(false)\r\n\r\n    const Transition = React.forwardRef(function Transition(props, ref) {\r\n        return <Slide direction=\"up\" ref={ref} {...props} />;\r\n    });\r\n\r\n    const handleSave = (files) => {\r\n        if (files && files.length > 0) {\r\n            sendRequest(files[0])\r\n        }\r\n    }\r\n\r\n    function handleCloseDialog() {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const sendRequest = (file) => {\r\n        if (!openDialog) {\r\n            setLoading(true)\r\n            CreateFile(file).then(response => response.json())\r\n                .then(response => {\r\n                    setLoading(false)\r\n                    setOpenDialog(true);\r\n                    setDownloadLink(config.Url + \"api/files/\" + response.guid)\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? <Loading /> :\r\n                <ToyZone onFilesAdded={handleSave} />\r\n            }\r\n            {openDialog ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    TransitionComponent={Transition}\r\n                    onClose={handleCloseDialog}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Congratulations!!! File Uploaded\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <p>Share the link with whoever you want.</p>\r\n                        <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            <a href={downloadLink} target=\"_blank\">{downloadLink}</a>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseDialog} color=\"primary\">\r\n                            Close\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box p={3}>{children}</Box>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default TabPanel;","const AllTabProps = index => {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nexport default AllTabProps;","import React, { useEffect } from 'react'\r\nimport { Sandbox as ReactSandbox } from 'react-sandbox-editor'\r\nimport './styles.css'\r\n\r\nconst SandBox = props => {\r\n  const { disable, handleChangeSandBox, content } = props\r\n\r\n  useEffect(() => {\r\n\r\n    document.querySelectorAll('#tabs-content > div:nth-child(2) > :nth-child(2)').forEach(element => {\r\n      element.style.width = \"100%\"\r\n      element.style.height = \"100%\"\r\n    });\r\n\r\n    document.querySelectorAll('.sandbox-hide').forEach(element => {\r\n      element.parentElement.parentElement.style.width = \"100%\"\r\n      element.parentElement.parentElement.style.height = \"100%\"\r\n      element.parentElement.parentElement.style.position = \"relative\"\r\n      element.parentElement.parentElement.style.padding = \"1px\"\r\n      element.parentElement.parentElement.style.background = \"linear-gradient(to right, rgb(4, 92, 255), rgb(255, 251, 0), rgb(197, 49, 12))\"\r\n    });\r\n    \r\n    document.querySelectorAll('#tabs-content > div:nth-child(4)').forEach(element => {\r\n      element.remove()\r\n    });\r\n\r\n    document.querySelectorAll('#tabs-content > div:nth-child(1)').forEach(element => {\r\n      element.style.height = \"100%\"\r\n    });\r\n\r\n    document.querySelectorAll('#tabs-content > div:nth-child(2)').forEach(element => {\r\n      element.style.height = \"100%\"\r\n    });\r\n  })\r\n\r\n  return (\r\n    <ReactSandbox\r\n    id=\"sandboxSkere\"\r\n      classes={{\r\n        header: \"sandbox-hide\"\r\n      }}\r\n      displayMode=\"horizontal-split\"\r\n      selectedTab=\"scriptTab\"\r\n      onDisplayModeButtonClick={function () { }}\r\n      onCodeChange={handleChangeSandBox}\r\n      permissions={[\r\n        'allow-pointer-lock',\r\n        'allow-forms',\r\n        'allow-popups',\r\n        'allow-modals',\r\n        'allow-scripts',\r\n        'allow-same-origin',\r\n        'allow-top-navigation'\r\n      ]}\r\n      scriptEditor={{\r\n        defaultValue: content,\r\n        mode: 'javascript',\r\n        readOnly: disable,\r\n        wrapLines: true\r\n      }}\r\n      templateEditor={{\r\n        defaultValue: '<div id=\"root\"></div>',\r\n        mode: 'html',\r\n        readOnly: false,\r\n        wrapLines: false\r\n      }}\r\n      theme={disable ? \"twilight\" : \"github\"}\r\n      executeOnCodeChange={false}\r\n      executeOnCodeChangeDebounce={0}\r\n\r\n    />\r\n  )\r\n}\r\n\r\n\r\nexport default SandBox;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        paddingBottom: \"50px\"\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst ContentTypeSelect = props => {\r\n    const { disable, handleChangeContentType, value } = props\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <FormControl className={classes.formControl} disabled={disable}>\r\n            <InputLabel htmlFor=\"type-simple\">Content Type</InputLabel>\r\n            <Select\r\n                value={value}\r\n                onChange={handleChangeContentType}\r\n                inputProps={{\r\n                    name: 'ContentType',\r\n                    id: 'type-simple',\r\n                }}\r\n            >\r\n                <MenuItem value={\"application/json\"}>JSON</MenuItem>\r\n                <MenuItem value={\"text/html\"}>HTML</MenuItem>\r\n                <MenuItem value={\"application/xhtml+xml\"}>XHTML</MenuItem>\r\n                <MenuItem value={\"application/xml\"}>XML</MenuItem>\r\n                <MenuItem value={\"application/javascript\"}>Javascript</MenuItem>\r\n                <MenuItem value={\"multipart/form-data\"}>Form Data</MenuItem>\r\n                <MenuItem value={\"text/css\"}>CSS</MenuItem>\r\n                <MenuItem value={\"text/csv\"}>CSV</MenuItem>\r\n                <MenuItem value={\"text/plain\"}>Text Plain</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ContentTypeSelect","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Close from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        paddingBottom: \"50px\"\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    textField: {\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst StatusCodeSelect = props => {\r\n    const { disable, handleChangeStatusCode, value } = props\r\n    const classes = useStyles();\r\n    const [customState, setCustomState] = React.useState(false);\r\n\r\n    function handleChange(event) {\r\n        if (customState) {\r\n            handleChangeStatusCode(event)\r\n        }\r\n        else {\r\n            if (event.target.value == 0) {\r\n                setCustomState(true)\r\n            }\r\n            else {\r\n                handleChangeStatusCode(event)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClickShowPassword = () => {\r\n        setCustomState(false)\r\n    };\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    return (\r\n        <FormControl className={classes.formControl} disabled={disable}>\r\n            {!customState ? <InputLabel htmlFor=\"code-simple\">Status Code</InputLabel> : null}\r\n            {customState ?\r\n                <TextField\r\n                    id=\"filled-adornment-password\"\r\n                    className={clsx(classes.margin, classes.textField)}\r\n                    type='number'\r\n                    label=\"Custom Status Code\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    name=\"StatusCode\"\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                >\r\n                                    <Close />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                :\r\n                <Select\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className={classes.textField}\r\n                    inputProps={{\r\n                        name: 'StatusCode',\r\n                        id: 'code-simple'\r\n                    }}\r\n                >\r\n                    <MenuItem value={0}>Custom</MenuItem>\r\n                    <MenuItem value={100}>100 Continue</MenuItem>\r\n                    <MenuItem value={101}>101 Switching Protocol</MenuItem>\r\n                    <MenuItem value={200}>200 OK</MenuItem>\r\n                    <MenuItem value={201}>201 Created</MenuItem>\r\n                    <MenuItem value={202}>202 Accepted</MenuItem>\r\n                    <MenuItem value={203}>203 Non-Authoritative Information</MenuItem>\r\n                    <MenuItem value={204}>204 No Content</MenuItem>\r\n                    <MenuItem value={205}>205 Reset Content</MenuItem>\r\n                    <MenuItem value={206}>206 Partial Content</MenuItem>\r\n                    <MenuItem value={300}>300 Multiple Choice</MenuItem>\r\n                    <MenuItem value={301}>301 Moved Permanently</MenuItem>\r\n                    <MenuItem value={302}>302 Found</MenuItem>\r\n                    <MenuItem value={303}>303 See Other</MenuItem>\r\n                    <MenuItem value={304}>304 Not Modified</MenuItem>\r\n                    <MenuItem value={307}>307 Temporary Redirect</MenuItem>\r\n                    <MenuItem value={308}>308 Permanent Redirect</MenuItem>\r\n                    <MenuItem value={400}>400 Bad Request</MenuItem>\r\n                    <MenuItem value={401}>401 Unauthorized</MenuItem>\r\n                    <MenuItem value={403}>403 Forbidden</MenuItem>\r\n                    <MenuItem value={404}>404 Not Found</MenuItem>\r\n                    <MenuItem value={406}>406 Not Acceptable</MenuItem>\r\n                    <MenuItem value={408}>408 Request Timeout</MenuItem>\r\n                    <MenuItem value={409}>409 Conflict</MenuItem>\r\n                    <MenuItem value={410}>410 Gone</MenuItem>\r\n                    <MenuItem value={500}>500 Internal Server Error</MenuItem>\r\n                    <MenuItem value={501}>501 Not Implemented</MenuItem>\r\n                    <MenuItem value={502}>502 Bad Gateway</MenuItem>\r\n                    <MenuItem value={503}>503 Service Unavailable</MenuItem>\r\n                </Select>\r\n            }\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default StatusCodeSelect","import React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Add from '@material-ui/icons/Add';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport clsx from 'clsx';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '75%',\r\n        paddingLeft: \"1vh\",\r\n        margin: \"0 auto\",\r\n        maxHeight:\"100px\"\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    gridHeaderAdded: {\r\n        paddingTop: \"12px\",\r\n        color: \"grey\"\r\n    },\r\n    textHeaderAdded: {\r\n        color: \"grey\"\r\n    }\r\n}));\r\n\r\nconst HeaderPanel = props => {\r\n    const { disabled, handleChangeHeaders, headers } = props\r\n\r\n    const [header, setheader] = React.useState({ keyH: \"\", valueH: \"\" })\r\n    const classes = useStyles();\r\n \r\n    const handleAddHeader = event => {\r\n        if (header.keyH.toString().replace(/\\s/g, '').length > 0) {\r\n            handleChangeHeaders([...headers, header])\r\n            setheader({ keyH: \"\", valueH: \"\" })\r\n        }\r\n    }\r\n    const handleHeaderOnChange = event => {\r\n        setheader({ ...header, [event.target.name]: [event.target.value] })\r\n    }\r\n    const handleRemoveHeader = index => event => {\r\n        handleChangeHeaders(headers.filter((value, indexHeader) => indexHeader != index))\r\n    }\r\n    return (\r\n        <div className={classes.root} >\r\n            <ExpansionPanel TransitionProps={{ unmountOnExit: true }} disabled={disabled}>\r\n                <ExpansionPanelSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                >\r\n                    <Typography className={classes.heading}>Custom Headers</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <Grid container spacing={3}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    value={header.keyH}\r\n                                    onChange={handleHeaderOnChange}\r\n                                    name=\"keyH\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    value={header.valueH}\r\n                                    onChange={handleHeaderOnChange}\r\n                                    name=\"valueH\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    edge=\"end\"\r\n                                                    onClick={handleAddHeader}\r\n                                                >\r\n                                                    <Add />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        {headers.map(function (header, index) {\r\n                            return <Grid container spacing={3} className={classes.gridHeaderAdded}>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        className={clsx(classes.margin, classes.textField)}\r\n                                        disabled\r\n                                        value={header.keyH}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        className={clsx(classes.margin, classes.textField)}\r\n                                        disabled\r\n                                        value={header.valueH}\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        edge=\"end\"\r\n                                                        onClick={handleRemoveHeader(index)}\r\n                                                    >\r\n                                                        <Remove />\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        })}\r\n                    </Grid>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderPanel;","import React, { useState } from 'react'\r\nimport SandBox from '../SandBox'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ContentTypeSelect from '../Selects/ContentTypeSelect'\r\nimport StatusCodeSelect from '../Selects/StatusCodeSelect'\r\nimport HeaderPanel from '../HeaderPanel'\r\n\r\nconst HttpMethodMock = props => {\r\n    const { classes, handleChangeSandBox, handleChangeSelect, handleChangeSwitch, handleChangeHeaders, mock, needCheck = true } = props;\r\n    const checked = mock.Active;\r\n\r\n    return (\r\n        <Grid container className={classes.gridContainer}>\r\n            <Grid item xs={12}>\r\n                {needCheck ?\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={mock.Active}\r\n                                onChange={handleChangeSwitch}\r\n                                inputProps={{\r\n                                    name: 'Active'\r\n                                }}\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Enable\"\r\n                    /> : null}\r\n                <ContentTypeSelect disable={needCheck && !checked} value={mock.ContentType} handleChangeContentType={handleChangeSelect} />\r\n                <StatusCodeSelect disable={needCheck && !checked} value={mock.StatusCode} handleChangeStatusCode={handleChangeSelect} />\r\n            </Grid>\r\n            <Grid container>\r\n                {/* <Grid item md>\r\n                    <Paper className={classes.hidden}></Paper>\r\n                </Grid> */}\r\n                <Grid item md={6} className={classes.gridSandbox}>\r\n                    <SandBox handleChangeSandBox={handleChangeSandBox} content={mock.Body} className={classes.moduleBorderWrap} disable={needCheck && !checked} />\r\n                </Grid>\r\n                <Grid item md>\r\n                    <HeaderPanel disabled={needCheck && !checked} headers={mock.Headers} handleChangeHeaders={handleChangeHeaders}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default HttpMethodMock;","\r\n\r\nexport const validateJson = str => {\r\n    if (/^[\\],:{}\\s]*$/.test(str.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\r\n        replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\r\n        replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\r\n\r\n        return true\r\n    } else {\r\n\r\n        return false\r\n    }\r\n}\r\n\r\n//XML HTML and XHTML\r\nexport const validateXML = text => {\r\n\r\n    if (document.implementation.createDocument) {\r\n        try {\r\n            var parser = new DOMParser();\r\n            var xmlDoc = parser.parseFromString(text, \"application/xml\");\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n\r\n        if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n      backgroundColor: green[600],\r\n    },\r\n    error: {\r\n      backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n      backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n      fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n      opacity: 0.9,\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n  }));\r\n\r\nconst CustomSnackbarContent = props => {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n  \r\n    return (\r\n      <SnackbarContent\r\n        className={clsx(classes[variant], className)}\r\n        aria-describedby=\"client-snackbar\"\r\n        message={\r\n          <span id=\"client-snackbar\" className={classes.message}>\r\n            <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n            {message}\r\n          </span>\r\n        }\r\n        action={[\r\n          <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n            <CloseIcon className={classes.icon} />\r\n          </IconButton>,\r\n        ]}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  \r\n  CustomSnackbarContent.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\r\n  };\r\n\r\n  export default CustomSnackbarContent","import React, { useState, forwardRef, useRef, useImperativeHandle } from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport TabPanel from './TabPanel'\r\nimport AllTabProps from './AllTabProps'\r\nimport HttpMethodMock from './HttpMethodMock'\r\nimport { validateJson, validateXML } from '../../helpers/Validations'\r\nimport { CreateMock } from '../Api'\r\nimport { config } from '../Api/config'\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Loading from '../Loading'\r\nimport SnackbarContent from '../CustomSnackbarContent'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    gridContainer: {\r\n        textAlign: \"center\"\r\n    },\r\n    gridSandbox: {\r\n        height: \"50%\"\r\n    },\r\n    moduleBorderWrap: {\r\n        maxWidth: \"250px\",\r\n        padding: \"1rem\",\r\n        position: \"relative\",\r\n        background: \"linear-gradient(to right, red, purple)\",\r\n        padding: \"3px\"\r\n    },\r\n    hidden: {\r\n        visibility: \"hidden\"\r\n    },\r\n    buttonCreate: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    }\r\n}));\r\n\r\nconst MockTab = forwardRef((props, ref) => {\r\n    const classes = useStyles();\r\n    const mockDefault = {\r\n        Active: false,\r\n        Body: '{\"Hello\" : \"World\"}',\r\n        ContentType: \"application/json\",\r\n        StatusCode: 200,\r\n        Headers: [],\r\n        Charset: \"UTF-8\"\r\n    }\r\n    const [mockGet, setMockGet] = useState({ ...mockDefault, Active: true })\r\n    const [mockPost, setMockPost] = useState(mockDefault)\r\n    const [mockPut, setMockPut] = useState(mockDefault)\r\n    const [mockPatch, setMockPatch] = useState(mockDefault)\r\n    const [mockDelete, setMockDelete] = useState(mockDefault)\r\n    const [tabindex, setTabindex] = React.useState(0);\r\n\r\n    const [openDialog, setOpenDialog] = React.useState();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [downloadLink, setDownloadLink] = React.useState('');\r\n    const [isLoading, setLoading] = React.useState(false)\r\n\r\n    const theme = useTheme();\r\n    const Transition = React.forwardRef(function Transition(props, ref) {\r\n        return <Slide direction=\"up\" ref={ref} {...props} />;\r\n    });\r\n\r\n\r\n    const handleClick = () => {\r\n        if (mockGet.Active && mockGet.ContentType === \"application/json\" && !validateJson(mockGet.Body)) {\r\n            setAlertMessage(\"GET body does not have a correct JSON format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockGet.Active && mockGet.ContentType === \"application/xml\" && !validateXML(mockGet.Body)) {\r\n            setAlertMessage(\"GET body does not have a correct XML format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPost.Active && mockPost.ContentType === \"application/json\" && !validateJson(mockPost.Body)) {\r\n            setAlertMessage(\"POST body does not have a correct JSON format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPost.Active && mockPost.ContentType === \"application/xml\" && !validateXML(mockPost.Body)) {\r\n            setAlertMessage(\"POST body does not have a correct XML format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPut.Active && mockPut.ContentType === \"application/json\" && !validateJson(mockPut.Body)) {\r\n            setAlertMessage(\"PUT body does not have a correct JSON format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPut.Active && mockPut.ContentType === \"application/xml\" && !validateXML(mockPut.Body)) {\r\n            setAlertMessage(\"PUT body does not have a correct XML format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPatch.Active && mockPatch.ContentType === \"application/json\" && !validateJson(mockPatch.Body)) {\r\n            setAlertMessage(\"PATCH body does not have a correct JSON format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockPatch.Active && mockPatch.ContentType === \"application/xml\" && !validateXML(mockPatch.Body)) {\r\n            setAlertMessage(\"PATCH body does not have a correct XML format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockDelete.Active && mockDelete.ContentType === \"application/json\" && !validateJson(mockDelete.Body)) {\r\n            setAlertMessage(\"DELETE body does not have a correct JSON format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else if (mockDelete.Active && mockDelete.ContentType === \"application/xml\" && !validateXML(mockDelete.Body)) {\r\n            setAlertMessage(\"DELETE body does not have a correct XML format\")\r\n            setOpenAlert(true);\r\n        }\r\n        else {\r\n            setLoading(true)\r\n            CreateMock(mockGet, mockPost, mockPut, mockPatch, mockDelete)\r\n                .then(response => response.json()).then(response => {\r\n                    setLoading(false)\r\n                    setOpenDialog(true);\r\n                    setDownloadLink(config.Url + \"api/\" + response.guid)\r\n                });\r\n        }\r\n\r\n\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n        save(){\r\n            handleClick()\r\n        }\r\n    }));\r\n    const handleCloseAlert = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlert(false)\r\n    }\r\n    const handleChangeHeaders = method => (headers) => {\r\n        changeMock(method, \"Headers\", headers)\r\n    }\r\n\r\n    const handleChangeSandBox = method => (editorName, value) => {\r\n        changeMock(method, \"Body\", value)\r\n    }\r\n\r\n    const handleChangeSelect = method => (event) => {\r\n        changeMock(method, event.target.name, event.target.value)\r\n    }\r\n\r\n    const handleChangeSwitch = method => (event, value) => {\r\n        changeMock(method, \"Active\", value)\r\n    }\r\n    const changeMock = (method, name, value) => {\r\n        switch (method) {\r\n            case \"GET\":\r\n                setMockGet({ ...mockGet, [name]: value })\r\n                break;\r\n            case \"POST\":\r\n                setMockPost({ ...mockPost, [name]: value })\r\n                break;\r\n            case \"PUT\":\r\n                setMockPut({ ...mockPut, [name]: value })\r\n                break;\r\n            case \"PATCH\":\r\n                setMockPatch({ ...mockPatch, [name]: value })\r\n                break;\r\n            case \"DELETE\":\r\n                setMockDelete({ ...mockDelete, [name]: value })\r\n                break;\r\n        }\r\n    }\r\n    function handleChangeTab(event, newValue) {\r\n        setTabindex(newValue);\r\n    }\r\n\r\n    function handleChangeTabIndex(index) {\r\n        setTabindex(index);\r\n    }\r\n    const validateBody = () => {\r\n        if (validateJson(mockGet.Body)) {\r\n            alert(\"GET es JSON\")\r\n        }\r\n        else {\r\n            alert(\"GET no es Json\")\r\n        }\r\n        if (validateXML(mockGet.Body)) {\r\n            alert(\"GET es CSV\")\r\n        }\r\n        else {\r\n            alert(\"GET no es CSV\")\r\n        }\r\n    }\r\n    function handleCloseDialog() {\r\n        setOpenDialog(false);\r\n    }\r\n    return (\r\n        <div>\r\n            {isLoading ? <Loading /> :\r\n                <div>\r\n                    <Tabs\r\n                        value={tabindex}\r\n                        onChange={handleChangeTab}\r\n                        indicatorColor=\"secondary\"\r\n                        textColor=\"secondary\"\r\n                        aria-label=\"full width tabs example\"\r\n                        centered\r\n                    >\r\n                        <Tab label=\"GET\" {...AllTabProps(0)} />\r\n                        <Tab label=\"POST\" {...AllTabProps(1)} />\r\n                        <Tab label=\"PUT\" {...AllTabProps(2)} />\r\n                        <Tab label=\"PATCH\" {...AllTabProps(3)} />\r\n                        <Tab label=\"DELETE\" {...AllTabProps(4)} />\r\n                    </Tabs>\r\n                    <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={tabindex}\r\n                        onChangeIndex={handleChangeTabIndex}\r\n                    >\r\n                        <TabPanel value={tabindex} index={0} dir={theme.direction}>\r\n                            <HttpMethodMock classes={classes} mock={mockGet} handleChangeSandBox={handleChangeSandBox(\"GET\")} handleChangeSelect={handleChangeSelect(\"GET\")} handleChangeSwitch={handleChangeSwitch(\"GET\")} handleChangeHeaders={handleChangeHeaders(\"GET\")} needCheck={false} />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={tabindex} index={1} dir={theme.direction}>\r\n                            <HttpMethodMock classes={classes} mock={mockPost} handleChangeSandBox={handleChangeSandBox(\"POST\")} handleChangeSelect={handleChangeSelect(\"POST\")} handleChangeSwitch={handleChangeSwitch(\"POST\")} handleChangeHeaders={handleChangeHeaders(\"POST\")} />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={tabindex} index={2} dir={theme.direction}>\r\n                            <HttpMethodMock classes={classes} mock={mockPut} handleChangeSandBox={handleChangeSandBox(\"PUT\")} handleChangeSelect={handleChangeSelect(\"PUT\")} handleChangeSwitch={handleChangeSwitch(\"PUT\")} handleChangeHeaders={handleChangeHeaders(\"PUT\")} />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={tabindex} index={3} dir={theme.direction}>\r\n                            <HttpMethodMock classes={classes} mock={mockPatch} handleChangeSandBox={handleChangeSandBox(\"PATCH\")} handleChangeSelect={handleChangeSelect(\"PATCH\")} handleChangeSwitch={handleChangeSwitch(\"PATCH\")} handleChangeHeaders={handleChangeHeaders(\"PATCH\")} />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={tabindex} index={4} dir={theme.direction}>\r\n                            <HttpMethodMock classes={classes} mock={mockDelete} handleChangeSandBox={handleChangeSandBox(\"DELETE\")} handleChangeSelect={handleChangeSelect(\"DELETE\")} handleChangeSwitch={handleChangeSwitch(\"DELETE\")} handleChangeHeaders={handleChangeHeaders(\"DELETE\")} />\r\n                        </TabPanel>\r\n                    </SwipeableViews>\r\n                    {/* <Button onClick={handleClick} className={classes.buttonCreate} color=\"secondary\" variant=\"contained\" size=\"large\">Create Mock</Button> */}\r\n                </div>\r\n            }\r\n            {openDialog ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    TransitionComponent={Transition}\r\n                    onClose={handleCloseDialog}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Congratulations!!! Mock Created\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <p>Share the link with whoever you want.</p>\r\n                        <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            <a href={downloadLink} target=\"_blank\">{downloadLink}</a>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseDialog} color=\"primary\">\r\n                            Close\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={openAlert}\r\n                autoHideDuration={3000}\r\n                onClose={handleCloseAlert}\r\n            >\r\n                <SnackbarContent\r\n                    onClose={handleCloseAlert}\r\n                    variant=\"error\"\r\n                    message={alertMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MockTab;","import React, { forwardRef } from 'react';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {Tabs as MaterialTabs} from '@material-ui/core';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DropzoneArea from '../DropzoneArea';\r\nimport MockTab from './MockTab';\r\nimport TabPanel from './TabPanel'\r\nimport AllTabProps from './AllTabProps'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst Tabs = forwardRef((props, ref) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    function handleChange(event, newValue) {\r\n        setValue(newValue);\r\n    }\r\n\r\n    function handleChangeIndex(index) {\r\n        setValue(index);\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <MaterialTabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                aria-label=\"full width tabs example\"\r\n            >\r\n                <Tab label=\"Mock\" {...AllTabProps(0)} />\r\n                <Tab label=\"File Cloud\" {...AllTabProps(1)} />\r\n            </MaterialTabs>\r\n\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <MockTab ref={ref}/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <DropzoneArea />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </Paper>\r\n    );\r\n})\r\n\r\nexport default Tabs","import React from 'react'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport github from './svg/github.svg'\r\n\r\nconst GitHubIcon = props => {\r\n\r\n    return (\r\n        <Icon {...props}>\r\n            <img src={github} height=\"24px\" width=\"24px\" />\r\n        </Icon>\r\n    )\r\n}\r\nexport default GitHubIcon","import { createStyles, makeStyles, useTheme, Theme } from '@material-ui/core/styles';\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex'\r\n      \r\n    },\r\n    link:{\r\n      textDecoration:\"none\",\r\n      color: \"black\"\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n      color:\"white\"\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\nexport default useStyles;","import React, { useRef } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport Save from '@material-ui/icons/Save';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport Tabs from '../../components/Tabs';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport GitHubIcon from '../../icons/GitHubIcon'\r\n\r\nimport useStyles from './styles'\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const childRef = useRef();\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Mocker Cloud\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n\r\n          <ListItem button key={\"Create Mock\"} onClick={() => childRef.current.save()}>\r\n            <ListItemIcon><Save /></ListItemIcon>\r\n            <ListItemText primary={\"Create Mock\"} />\r\n          </ListItem>\r\n          <ListItem button key={\"GitHub\"} onClick={() => window.location.href = \"https://github.com/mockercloud\"}>\r\n            <ListItemIcon><GitHubIcon /></ListItemIcon>\r\n            <ListItemText primary={\"GitHub\"} />\r\n          </ListItem>\r\n\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Switch>\r\n          <Route exact path='/' component={() => <Tabs ref={childRef} />} />\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"sourceRoot":""}